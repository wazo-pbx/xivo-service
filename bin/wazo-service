#!/bin/bash
# Copyright 2018-2019 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0-or-later

PATH=/bin:/usr/bin:/sbin:/usr/sbin
action=$1
services_filter=${2:-default}
include_monit=1
wazo_services="xivo-dxtora xivo-provd xivo-agid asterisk xivo-amid wazo-call-logd xivo-agentd wazo-dird wazo-dird-phoned wazo-calld wazo-websocketd wazo-chatd"
default_services="dahdi wazo-plugind wazo-webhookd xivo-sysconfd xivo-confgend xivo-confd wazo-auth $wazo_services"
all_services="rabbitmq-server consul postgresql nginx $default_services"
monit_default="/etc/default/monit"
asterisk_default="/etc/default/asterisk"
WAZO_DEFAULT_FILE="/etc/default/xivo"
MAX_RETRY_SERVICE=30
wazo_disabled_file="/var/lib/xivo/disabled"
is_systemd=0

usage() {
    cat <<-EOF
	usage : $0 action [services_filter]
	availables actions :
	    status     : print status of all wazo services
	    restart    : restart all wazo services
	    stop       : stop all wazo services
	    start      : start all wazo services
	    enable     : enable all wazo services
	    disable    : disable all wazo services

	availables services_filter :
	    xivo       : manage services only used on an active Wazo
	    default    : xivo + messaging and configuration
	    all        : default + web and database servers

	impacted services ($services_filter) : $services
	EOF

    exit 0
}

if [ "$services_filter" = default ]; then
    services=$default_services
elif [ "$services_filter" = all ]; then
    services=$all_services
elif [ "$services_filter" = xivo ]; then
    services=$wazo_services
elif [ "$services_filter" = "xivo-nomonit" ]; then
    services=$wazo_services
    include_monit=0
else
    echo "Invalid service filter \"$services_filter\""
    usage
fi

if [ -d /run/systemd/system ]; then
    is_systemd=1
fi


reverse_list() {
    local service_list=$1
    /bin/echo $service_list | tac -s' '
}

reversed_services=$(reverse_list "$services")

wazo_status() {
    wazo-service-python status "$services_filter"
}

wazo_enable() {
    echo "Enabling Wazo services..."
    rm -f $wazo_disabled_file
    grep -qs 'startup=' $WAZO_DEFAULT_FILE
    if [ $? -eq 0 ]; then
        sed -i 's/startup=no/startup=yes/' $WAZO_DEFAULT_FILE
    else
        echo startup=yes >> $WAZO_DEFAULT_FILE
    fi
    enable_asterisk
    enable_monit
}

wazo_disable() {
    echo "Disabling Wazo services..."
    touch $wazo_disabled_file
    grep -qs 'startup=' $WAZO_DEFAULT_FILE
    if [ $? -eq 0 ]; then
        sed -i 's/startup=yes/startup=no/' $WAZO_DEFAULT_FILE
    else
        echo startup=no >> $WAZO_DEFAULT_FILE
    fi
    disable_asterisk
    disable_monit
}

disable_asterisk() {
    if [ -f $asterisk_default ]; then
        sed -i 's/RUNASTERISK=yes/RUNASTERISK=no/' $asterisk_default
    fi
}

enable_asterisk() {
    if [ -f $asterisk_default ]; then
        sed -i 's/RUNASTERISK=no/RUNASTERISK=yes/' $asterisk_default
    fi
}

disable_monit() {
    sed -i 's/startup=1/startup=0/' $monit_default  # older monit
    sed -i 's/START=yes/START=no/' $monit_default
    # systemctl disable also updates sysv links via update-rc.d
    systemctl disable monit &> /dev/null
}

stop_monit() {
    if [ $include_monit -eq 1 ]; then
        service monit stop > /dev/null
    fi
}

enable_monit() {
    sed -i 's/startup=0/startup=1/' $monit_default  # older monit
    sed -i 's/START=no/START=yes/' $monit_default
    systemctl enable monit &> /dev/null
}

start_monit() {
    if [ $include_monit -eq 1 ]; then
        service monit start > /dev/null
    fi
}

close_sip_port() {
    echo "Closing port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 1 ]; then
        iptables -I INPUT 1 -p udp --dport 5060 -j DROP
    fi
}

open_sip_port() {
    echo "Opening port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 0 ]; then
        iptables -D INPUT -p udp --dport 5060 -j DROP
    fi
}

wait_for_service() {
    sleep 1
    echo -n "."
    _x=$(( $_x + 1 ))
    if [ $_x -eq $MAX_RETRY_SERVICE ]; then
        echo " NOK"
        echo "ERR: Stop after $_x retry."
        open_sip_port
        exit 1
    fi
}

is_enabled() {
    local service=$1
    enabled=0
    if [ $service = "asterisk" ]; then
        if [ $is_systemd -eq 0 ]; then
            grep -q 'RUNASTERISK=yes' $asterisk_default
            enabled=$?
        else
            test ! -f $wazo_disabled_file
            enabled=$?
        fi
    fi
    for srv in $wazo_services; do
        if [ $srv != "asterisk" ]; then
            if [ $srv = $service ]; then
                if [ $is_systemd -eq 0 ]; then
                    grep -q 'startup=yes' $WAZO_DEFAULT_FILE
                    enabled=$?
                else
                    test ! -f $wazo_disabled_file
                    enabled=$?
                fi
            fi
        fi
    done
    echo $enabled
}

is_running() {
    local service=$1
    local running=0
    if [ $is_systemd -eq 0 ]; then
        if [ "$service" = "postgresql" ] ; then
            pg_state=$(pg_lsclusters | tail -n 1 | awk '{print $4}')
            if [ "$pg_state" != "online" ] ; then
                running=3
            fi
        else
            if [ -f /etc/init.d/$service ]; then
                service $service status > /dev/null
                running=$?
            else
                running=4
            fi
        fi
    else
        if [ "$service" = "postgresql" ] ; then
            systemctl status postgresql@9.6-main.service > /dev/null
            running=$?
        else
            systemctl status $service > /dev/null
            running=$?
        fi
    fi
    echo $running
}

is_optional() {
    local service=$1
    if [ "$service" = "" ] ; then
        echo 0
    else
        echo 1
    fi
}

start_services() {
    local services=$1
    for service in $services; do
        if [ $service = postgresql -a $is_systemd -eq 1 ]; then
            service=postgresql@9.6-main
        fi
        optional=$(is_optional $service)
        enabled=$(is_enabled $service)
        running=$(is_running $service)
        if [ $enabled -eq 0 ] && [ $running -ne 0 ] ; then
            if [ $is_systemd -eq 0 ]; then
                if [ -f /etc/init.d/$service ]; then
                    invoke-rc.d $service start > /dev/null
                    echo -en "\tstarting $service ..."
                    _x=0
                    while [ $(is_running "$service") -ne 0 ]; do
                        wait_for_service
                    done
                    echo " OK"
                fi
            else
                echo -en "\tstarting $service ..."
                if [ $optional -eq 0 ]; then
                    if systemctl start $service 2> /dev/null; then
                        echo " OK"
                    else
                        echo " ignored"
                    fi
                else
                    if ! systemctl start $service; then
                        echo " NOK"
                        open_sip_port
                        exit 1
                    fi
                    echo " OK"
                fi
            fi
        elif [ $enabled -ne 0 ]; then
            echo -e "\t$service is disabled"
        fi
    done
    start_monit
}

stop_services() {
    stop_monit
    local services=$1
    for service in $services; do
        if [ $service = postgresql -a $is_systemd -eq 1 ]; then
            service=postgresql@9.6-main
        fi

        if [ $is_systemd -eq 0 ]; then
            running=$(is_running "$service")
            if [ $running -eq 0 ]; then
                if [  -f /etc/init.d/$service ]; then
                    invoke-rc.d $service stop > /dev/null
                fi
            fi
        else
            optional=$(is_optional $service)
            if [ $optional -eq 0 ]; then
                systemctl stop $service 2> /dev/null
            else
                systemctl stop $service
            fi
        fi
    done
}

wazo_start_and_open() {
    local service_list=$1
    echo "Waiting for services to start successfully..."
    start_services "$service_list"
    open_sip_port
}

wazo_close_and_stop() {
    local service_list=$1
    close_sip_port
    echo "Waiting for services to stop successfully..."
    stop_services "$service_list"
}

wazo_start() {
    wazo_start_and_open "$services"
    echo "Wazo fully booted"
}

wazo_stop() {
    wazo_close_and_stop "$reversed_services"
}

wazo_restart() {
    wazo_stop
    wazo_start
}

if [ "$(basename "$0")" == 'xivo-service' ]; then
    echo 'Warning: xivo-service is a deprecated alias to wazo-service: use wazo-service instead' >&2
fi

case $action in
    status|monitor)  wazo_status;;
    force-reload|restart) wazo_restart;;
    start)   wazo_start;;
    stop)    wazo_stop;;
    enable)  wazo_enable;;
    disable) wazo_disable;;
    *) usage;;
esac
